#ifndef HOF_HOF_H
#define HOF_HOF_H

#include "HOF.h"
#include "stdio.h"
#include "stdlib.h"

#include <vector>
#include <iostream>
#include <math.h>
#include <time.h>

using namespace std;

class HOF
{
public:
	HOF(void);
	~HOF(void);

public:
	static std::vector<float> HistogramOfForces(std::vector<float> A, std::vector<float> B);
	static std::vector<float> TransHof(std::vector<float> h, int degreeToMove);
	static std::vector<float> GenerateRobotVector(float px, float py);
	static std::vector<float> GenerateOriginRobotVector();
	//static std::vector<float> HistogramOfForcesWithOrientation(std::vector<int> A, std::vector<int> B, float Aorientation);
	static std::vector<float> HistogramOfForcesWithOrientation(std::vector<float> A, std::vector<float> B, float Aorientation);
	static std::vector<float> HofToDirection(std::vector<float> hof);
	static std::vector<std::string> DirectionToText(std::vector<float> direction);
	static std::vector<std::string> HofToText(std::vector<float> hof);
	static int HofToMainDirection8(std::vector<float> hof);
	static std::vector<std::vector<float> > BuildDirectionTable(std::vector<std::vector<float> > directions);
	static float Gaussian(float u, float d, float x);
	static std::vector<int> RankArray(std::vector<float> table);
	static int GetDirectionNumFromDirectionName(std::string directionName);
};

HOF::HOF(void)
{
}

HOF::~HOF(void)
{
}

vector<float> HOF::HistogramOfForces(vector<float> A, vector<float> B) //Hof A to B.
{
	float h[180] = {};
	int LA = A.size() / 2;
	int LB = B.size() / 2;

	for (int i = 0; i < LB; i++)
	{
		for (int j = 0; j < LA; j++)
		{
			float dx = float(A[2*j] - B[2*i]);
			float dy = float(A[2*j+1] - B[2*i+1]);
			float tf = atan2(dy,dx);
			int ti = int(tf * 180 / (2*PI));
			if (ti < 0)
			{
				ti += 180;
			}

			if (ti >= 0 && ti < 180)
			{
				h[ti]++;
			}
		}
	}
	vector<float> res(h, h + 180);
	return res;
}

std::vector<float> HOF::TransHof(std::vector<float> h, int degreeToMove)
{
	//printf("degreeToMove: %d\n", degreeToMove);
	int slip = degreeToMove / 2;
	std::vector<float> res(180, 0);

	if (slip > 0)
	{
		std::vector<float> t1(h.end() - slip, h.end());
		std::vector<float> t2(h.begin(), h.end() - slip);
		std::vector<float> t;
		t = t1;
		t.insert(t.end(), t2.begin(), t2.end());
		res = t;
	}
	else if (slip < 0)
	{
		std::vector<float> t1(h.begin() - slip, h.end());
		std::vector<float> t2(h.begin(), h.begin() - slip);
		std::vector<float> t;
		t = t1;
		t.insert(t.end(), t2.begin(), t2.end());	
		res = t;
	} 
	else
	{
		res = h;
	}

	return res;
}

std::vector<float> HOF::GenerateRobotVector(float px, float py)
{
	std::vector<float> res;

	float ix = px;
	float iy = py;

	for (float i = -10; i < 20; i += 0.05)
	{
		for (float j = -10; j < 20; j += 0.05)
		{
			float d = sqrt(pow(i - ix, 2) + pow(j - iy, 2));
			if (d <= 0.2)
			{
				res.push_back(i);
				res.push_back(j);
			}
		}
	}

	return res;
}

std::vector<float> HOF::GenerateOriginRobotVector()
{
	std::vector<float> res;

	float ix = 0;
	float iy = 0;

	for (float i = -10; i < 10; i += 0.05)
	{
		for (float j = -10; j < 10; j += 0.05)
		{
			float d = sqrt(pow(i - ix, 2) + pow(j - iy, 2));
			if (d <= 0.2)
			{
				res.push_back(i);
				res.push_back(j);
			}
		}
	}

	return res;	
}

/*
std::vector<float> HOF::HistogramOfForcesWithOrientation2(std::vector<int> A, std::vector<int> B, float Borientation)
{
	//without the third the para, the orientation of A is assumed to be 90.

	std::vector<float> res = TransHof(HistogramOfForces(A, B), -(Borientation - 90));
	return res;
}
*/

vector<float> HOF::HistogramOfForcesWithOrientation(vector<float> A, vector<float> B, float Borientation)
{
	vector<float> res;

	vector<float> B2(B.size(), 0);
	float centerBX = 0;
	float centerBY = 0;
	for (int i = 0; i < B.size()/2; i++)
	{
		centerBX += B[2*i];
		centerBY += B[2*i+1];
	}
	centerBX /= B.size()/2;
	centerBY /= B.size()/2;

	for (int i = 0; i < B.size()/2; i++)
	{
		B2[2*i] = B[2*i] - centerBX;
		B2[2*i+1] = B[2*i+1] - centerBY;
	}

	vector<float> A2(A.size(), 0);
	for (int i = 0; i < A.size()/2; i++)
	{
		A2[2*i] = A[2*i] - centerBX;
		A2[2*i+1] = A[2*i+1] - centerBY;
	}

	float dth = (Borientation - 90) * PI / 180;
	for (int i = 0; i < A.size()/2; i++)
	{
		float x = A2[2*i];
		float y = A2[2*i+1];
		A2[2*i] = x * cos(dth) + y * sin(dth);
		A2[2*i+1] = -x * sin(dth) + y * cos(dth);
	}

	res = HistogramOfForces(A2, B2);

	return res;
}


std::vector<float> HOF::HofToDirection(std::vector<float> hof)
{
	std::vector<float> res;
	//the summation of hof. (to be normalized)
	float hofsum = 0;
	for (int i = 0; i < hof.size(); i++)
	{
		hofsum += hof[i];
	}
	for (int i = 0; i < hof.size(); i++)
	{
		hof[i] /= hofsum;
	}

	float v4[4] = {0, 0, 0, 0};
	std::vector<float> direction(v4, v4+4); //front, left, back, right
	for (int i = 0; i < 90; i++)
	{
		direction[0] += hof[i] * Gaussian(45, 45, i);
	}
	for (int i = 45; i < 135; i++)
	{
		direction[1] += hof[i] * Gaussian(90, 45, i);
	}
	for (int i = 90; i < 180; i++)
	{
		direction[2] += hof[i] * Gaussian(135, 45, i);
	}
	for (int i = 135; i < 180; i++)
	{
		direction[3] += hof[i] * Gaussian(180, 45, i);
	}
	for (int i = 0; i < 45; i++)
	{
		direction[3] += hof[i] * Gaussian(0, 45, i);
	}

	float directionsum = 0;
	for (int i = 0; i < direction.size(); i++)
	{
		directionsum += direction[i];
	}
	for (int i = 0; i < direction.size(); i++)
	{
		direction[i] /= directionsum;
	}

	res = direction;
	return res;
}

std::vector<std::string> HOF::DirectionToText(std::vector<float> direction)
{
	std::vector<std::string> res;
	std::vector<int> indecs = RankArray(direction);
	for (int i = 0; i < indecs.size(); i++)
	{
		if (indecs[i] == 3)
		{
			if (i == 0)
			{
				res.push_back("front");
			}
			if (i == 1)
			{
				res.push_back("left");
			}
			if (i == 2)
			{
				res.push_back("back");
			}
			if (i == 3)
			{
				res.push_back("right");
			}
		}
		if (indecs[i] == 2)
		{
			if (i == 0)
			{
				res.push_back("front");
			}
			if (i == 1)
			{
				res.push_back("left");
			}
			if (i == 2)
			{
				res.push_back("back");
			}
			if (i == 3)
			{
				res.push_back("right");
			}
		}
	}

	return res;
}

std::vector<std::string> HOF::HofToText(std::vector<float> hof)
{
	std::vector<float> direction = HofToDirection(hof);
	//printf("front: %f, left: %f, back: %f, right: %f\n", direction[0], direction[1], direction[2], direction[3]);
	std::vector<std::string> res = DirectionToText(direction);
	return res;
}

int HOF::HofToMainDirection8(std::vector<float> hof)
{
	//their are 8 direction from front with counter clock direction to left front (0 ~ 7)
	int res = 0;
	std::vector<float> direction = HofToDirection(hof);
	std::vector<int> indecs = RankArray(direction);
	int maindirt = 0;
	for (int i = 0; i < indecs.size(); i++)
	{
		if (indecs[i] == 3)
		{
			if (i == 0)
			{
				maindirt = 0;
				if (direction[1] > 0 && direction[3] > 0)
				{
					res = 0;
				}
				else if (direction[1] > 0)
				{
					res = 1;
				}
				else if (direction[3] > 0)
				{
					res = 7;
				}
			}
			if (i == 1)
			{
				maindirt = 2;
				if (direction[0] > 0 && direction[2] > 0)
				{
					res = 2;
				}
				else if (direction[0] > 0)
				{
					res = 1;
				}
				else if (direction[2] > 0)
				{
					res = 3;
				}
			}
			if (i == 2)
			{
				maindirt = 4;
				if (direction[1] > 0 && direction[3] > 0)
				{
					res = 4;
				}
				else if (direction[1] > 0)
				{
					res = 3;
				}
				else if (direction[3] > 0)
				{
					res = 5;
				}
			}
			if (i == 3)
			{
				maindirt = 6;
				if (direction[0] > 0 && direction[2] > 0)
				{
					res = 6;
				}
				else if (direction[0] > 0)
				{
					res = 7;
				}
				else if (direction[2] > 0)
				{
					res = 5;
				}
			}
		}
	}

	return res;
}

//////////////////////////////////////////////////////////////////////////
//build 4 vectors that store the weight of each piece for all four directions!
std::vector<std::vector<float> > HOF::BuildDirectionTable(std::vector<std::vector<float> > directions)
{
	std::vector<std::vector<float> > res;
	for (int i = 0; i < 4; i++)
	{
		std::vector<float> d; 
		for (int j = 0; j < directions.size(); j++)
		{
			d.push_back(directions[j][i]);
		}
		res.push_back(d);
	}
	return res;
}

float HOF::Gaussian(float u, float d, float x)
{
	float res = 1 / sqrt(2 * PI * pow(d, 2)) * exp(-0.5 * pow(x - u, 2) / pow(d, 2));
	return res;
}

//////////////////////////////////////////////////////////////////////////
//Array ranking, return index from large to small
std::vector<int> HOF::RankArray(std::vector<float> table)
{
	int tableLength = table.size();
	std::vector<int> ranklabel(tableLength, 0);
	std::vector<int> result(tableLength, 0);
	for(int i=0; i < tableLength; i++)
	{
		int rnk=0;
		for(int z=0; z< tableLength; z++)
		{
			if(table[z]<table[i])
			{
				rnk++;
			}
		}
		ranklabel[i]=rnk;
	}
	for(int i=0; i < tableLength; i++)
	{
		result[tableLength - 1 - ranklabel[i]] = i;
	}
	return result;
}

int HOF::GetDirectionNumFromDirectionName(std::string directionName)
{
	int res = -1;
	if (directionName.compare("front") == 0)
	{
		res = 0;
	}
	if (directionName.compare("left") == 0)
	{
		res = 1;
	}
	if (directionName.compare("back") == 0)
	{
		res = 2;
	}
	if (directionName.compare("right") == 0)
	{
		res = 3;
	}
	return res;
}
#endif
