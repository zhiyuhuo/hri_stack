#ifndef ACTION_H
#define ACTION_H

#include "stdio.h"
#include "stdlib.h"
#include <vector>

#include "Header.h"

int Robot::ToPos(VecPosition posTarget)
{
	return ToPosP(posTarget);
}

int Robot::ToAngle(float angleTarget)
{
	double angleRobot = m_theta;
	double deltaAngle = angleTarget - angleRobot;
	while(deltaAngle > PI)
	{
		deltaAngle -= 2 * PI;
	}
	while(deltaAngle < -PI)
	{
		deltaAngle += 2 * PI;
	}

	double kA = abs(deltaAngle / PI) * 0.02;
	if (kA < 0.5)
	{
		kA = 0.5;
	}
	m_linearSpeed = 0;
	m_angularSpeed = deltaAngle * kA;

	if (abs(deltaAngle) < PI/100)
	{
		m_linearSpeed = 0;
		m_angularSpeed = 0;
		return 1;
	}
	else
	{
		return 0;
	}
}

int Robot::ToPosAngle(VecPosition posTarget, float angleTarget)
{
	int r1, r2 = 0;
	r1 = ToPos(posTarget);
	if (r1 > 0)
	{
		if (angleTarget >= 0)
		{
			r2 = ToAngle(angleTarget);
		}
		else
		{
			r2 = 1;
		}
	}
	if (r1 > 0 && r2 > 0)
	{
		return 1;
	}
	return 0;
}

int Robot::ToPosP(VecPosition posTarget)
{
	VecPosition posRobot = m_posRobot;
	double angleTarget = posTarget.GetDirectionTo(posRobot);
	double angleRobot = m_theta;
	double deltaDist = (posTarget - posRobot).GetMagnitude();
	double deltaAngle = angleTarget - angleRobot;
	while(deltaAngle > PI)
	{
		deltaAngle -= 2 * PI;
	}
	while(deltaAngle < -PI)
	{
		deltaAngle += 2 * PI;
	}
	
	double kL, kAC, kAL, kA;
	kL = 0.05;
	kAC = 5;
	kAL = 0.5;

	if (abs(deltaAngle) < PI / 2)
	{
		kA = abs(deltaAngle / PI) * kAC;
		if (kA < kAL)
		{
			kA = kAL;
		}
		m_linearSpeed = (PI - abs(deltaAngle)) * kL;
		m_angularSpeed = deltaAngle * kA;
	}
	else if (deltaAngle > PI / 2)
	{
		deltaAngle = PI - deltaAngle;
		kA = abs(deltaAngle / PI) * kAC;
		if (kA < kAL)
		{
			kA = kAL;
		}
		m_linearSpeed =  - (PI - abs(deltaAngle)) * kL;
		m_angularSpeed = - deltaAngle * kA;		
	}
	else if (deltaAngle < -PI / 2)
	{
		deltaAngle = -PI - deltaAngle;
		kA = abs(deltaAngle / PI) * kAC;
		if (kA < kAL)
		{
			kA = kAL;
		}
		m_linearSpeed =  - (PI - abs(deltaAngle)) * kL;
		m_angularSpeed = - deltaAngle * kA;		
	}

	if (deltaDist < 0.2)
	{
		m_linearSpeed = 0;
		m_angularSpeed = 0;
		return 1;
	}
	else
	{
		return 0;
	}
}

	
#endif
