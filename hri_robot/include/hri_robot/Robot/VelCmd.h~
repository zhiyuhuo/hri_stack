#ifndef VELCMD_H_
#define VELCMD_H_

#include "stdio.h"
#include "stdlib.h"
#include <vector>
#include <math.h>

#include "std_msgs/String.h"
#include "sensor_msgs/PointCloud2.h"
#include <time.h>

#include <opencv2/core/core.hpp>
#include <opencv2/calib3d/calib3d.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include "opencv2/objdetect/objdetect.hpp"
// #include "opencv2/gpu/gpu.hpp"
// #include <opencv2/ml/ml.hpp>  

#include "../CommandProc/Header.h"
#include "Header.h"

using namespace std;
using namespace cv;

int Robot::VelCommand()
{
	string str = m_velCmd;
	if (str.compare("forward") == 0)
	{
		m_linearSpeed = 0.2;
		m_angularSpeed = 0;
	}
	
	if (str.compare("back") == 0)
	{
		m_linearSpeed = -0.2;
		m_angularSpeed = 0;		
	}
	
	if (str.compare("left") == 0)
	{
		if (m_linearSpeed >= 0)
		{	
			m_angularSpeed = 0.2;		
		}
		else
		{
			m_angularSpeed = -0.2;
		}
	}
	
	if (str.compare("right") == 0)
	{
		if (m_linearSpeed >= 0)
		{	
			m_angularSpeed = -0.2;		
		}
		else
		{
			m_angularSpeed = 0.2;
		}	
	}
	
	if (str.compare("stop") == 0)
	{
		m_linearSpeed = 0;
		m_angularSpeed = 0;		
	}
}

int Robot::ConstructSpatialCommand(string voiceStr)
{
	int res = 0;
	if (voiceStr.compare("spatial command") == 0)
	{
		m_spatialCommand = "";
		m_phraseSize.clear();
	}
	else if (voiceStr.compare("command over") == 0)
	{
		res = 1;
	}
	else if (voiceStr.compare("clear all") == 0)
	{
		m_spatialCommand = "";
		m_phraseSize.clear();
		cout << "spatial command: " << m_spatialCommand << endl;
	}
	else if (voiceStr.compare("clear") == 0)
	{
		m_spatialCommand.erase(m_spatialCommand.end() - m_phraseSize[m_phraseSize.size()-1] - 1, m_spatialCommand.end());
		m_phraseSize.erase(m_phraseSize.end()-1, m_phraseSize.end());
		cout << "spatial command: " << m_spatialCommand << endl;
	}
	else 
	{
		m_spatialCommand = m_spatialCommand + voiceStr + " ";
		m_phraseSize.push_back(voiceStr.size());
		cout << "spatial command: " << m_spatialCommand << endl;
	}
	
	return res;
}

#endif